// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jDNnmx5YPsmKB7YPk2zzKj
// Component: 4q-UwlNF5Tl7

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: d_44jQYJpk3I/component
import MetricItem from "../../MetricItem"; // plasmic-import: fEz0PE6Ev5aO/component
import Feature from "../../Feature"; // plasmic-import: cXlmbP4G7mdr/component
import PlansPage from "../../PlansPage"; // plasmic-import: _1EWKQQCniro/component
import Testimonial from "../../Testimonial"; // plasmic-import: svh7gPm3QNr4/component

import { useScreenVariants as useScreenVariants_1DTjB6GfSzy } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 1dTjB_6GfSZY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zipo_aid.module.css"; // plasmic-import: jDNnmx5YPsmKB7YPk2zzKj/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 4q-UwlNF5Tl7/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 7yH6DmHHOYpf/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: BiYSEID0kU5z/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: xrUy32cYsn90/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: uwaz6gnyx52i/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: MZ5mE87u1YNg/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  plansPage?: p.Flex<typeof PlansPage>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_1DTjB6GfSzy()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section___4787N)}>
            <div className={classNames(projectcss.all, sty.freeBox__y0MSf)}>
              <div className={classNames(projectcss.all, sty.freeBox___5Pu5I)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__js65H
                  )}
                >
                  {"Welcome to Zipo aid"}
                </div>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__an0N)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fc7Or
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__junvi
                          )}
                        >
                          {"Dive into Financial Opportunities"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0O2XL)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__igslU
                  )}
                >
                  {
                    "Embark on a financial journey of exploration with Zipo Aid. We specialize in uncovering lucrative investment opportunities that harness the power of the market. Join us as we delve into the world of financial possibilities and navigate the currents of prosperity."
                  }
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___81Tea)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__aHgFz)}
                    color={"gold" as const}
                    link={"/signup" as const}
                  >
                    {"Get Started "}
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__vQn)}
                    color={"gold" as const}
                    ghost={true}
                    link={`/about`}
                  >
                    {"Learn More"}
                  </Button>
                </p.Stack>
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uCeDy)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__exvob)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zipo_aid/images/chartpng.png",
                  fullWidth: 2360,
                  fullHeight: 666,
                  aspectRatio: undefined
                }}
              />
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__hIdB6)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0SrrT
              )}
            >
              {"Featured In"}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8AAMz)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o2Biw
                )}
              >
                {"Financial Times"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fcmfC
                )}
              >
                {"Wall Street Journal"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___95YKp
                )}
              >
                {"Bloomberg"}
              </div>
            </p.Stack>
          </section>
          <section className={classNames(projectcss.all, sty.section__i6GqQ)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__utgkV)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3GmHg
                )}
              >
                {"Proven Results"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__s5Gnq)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j8Rb
                  )}
                >
                  {
                    "At Zipo Aid, our results speak volumes. We are dedicated to delivering exceptional outcomes for our clients, backed by solid performance metrics:"
                  }
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__l3Qis)}
                >
                  <MetricItem
                    className={classNames(
                      "__wab_instance",
                      sty.metricItem__bmfCp
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gsocH
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"$500M"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#B29600" }}
                        >
                          {"+"}
                        </span>
                      </React.Fragment>
                    </div>
                  </MetricItem>
                  <MetricItem
                    className={classNames(
                      "__wab_instance",
                      sty.metricItem__b4Q6U
                    )}
                    slot={"Average annual ROI"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o7DqC
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"15"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#B29600" }}
                        >
                          {"%"}
                        </span>
                      </React.Fragment>
                    </div>
                  </MetricItem>
                  <MetricItem
                    className={classNames(
                      "__wab_instance",
                      sty.metricItem___59IDh
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3FtPa
                        )}
                      >
                        {"client Satisfaction rate"}
                      </div>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cJmEy
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"95"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#B29600" }}
                        >
                          {"%"}
                        </span>
                      </React.Fragment>
                    </div>
                  </MetricItem>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </section>
          <section className={classNames(projectcss.all, sty.section__xqWsm)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tZgDe)}
            >
              <Feature
                className={classNames("__wab_instance", sty.feature___0AWv)}
                slot={
                  "Access valuable insights from seasoned financial advisors to guide your investment decisions."
                }
                slot2={"Expert Insights"}
              >
                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__rpfBf)}
                  role={"img"}
                />
              </Feature>
              <Feature
                className={classNames("__wab_instance", sty.feature__jpTgC)}
                slot={
                  "Achieve balance and stability by investing in a range of carefully curated opportunities."
                }
                slot2={"Diversified Portfolios"}
              >
                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__qr0Wo)}
                  role={"img"}
                />
              </Feature>
              <Feature
                className={classNames("__wab_instance", sty.feature__t7Ss)}
                slot={
                  "Stay informed with comprehensive reports on your portfolio's performance and growth."
                }
                slot2={"Transparent Reporting"}
              >
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg__xRdAq)}
                  role={"img"}
                />
              </Feature>
            </p.Stack>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__acKYo)}
            id={"#plans" as const}
          >
            <PlansPage
              data-plasmic-name={"plansPage"}
              data-plasmic-override={overrides.plansPage}
              className={classNames("__wab_instance", sty.plansPage)}
            />
          </section>
          <section className={classNames(projectcss.all, sty.section__fILu)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fIhQm)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gH7Yt)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wqo4D
                  )}
                >
                  {"Trusted by Thousands"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mhPX
                  )}
                >
                  {
                    "Join the ever-growing community of satisfied investors who have chosen Zipo Aid as their investment partner. "
                  }
                </div>
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={`/about`}
                  platform={"nextjs"}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__t5BJl)}
                    color={"gold" as const}
                  >
                    {"Learn More"}
                  </Button>
                </p.PlasmicLink>
              </p.Stack>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__b3SC)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nMj7J)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zipo_aid/images/phonepng.png",
                      fullWidth: 576,
                      fullHeight: 1152,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
            </p.Stack>
          </section>
          <section className={classNames(projectcss.all, sty.section___4JfkO)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p4Qo
              )}
            >
              {"Testimonials"}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iOoyF)}
            >
              <Testimonial
                className={classNames("__wab_instance", sty.testimonial__sQIdz)}
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__i2YV)}
                    displayHeight={"30px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"30px" as const}
                    loading={"lazy" as const}
                    src={
                      "https://images.unsplash.com/photo-1553514029-1318c9127859?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=464&q=80" as const
                    }
                  />
                }
              >
                {
                  "Zipo Aid has been an essential partner in my investment journey. Their personalized advice and strategic recommendations have consistently exceeded my expectations."
                }
              </Testimonial>
              <Testimonial
                className={classNames(
                  "__wab_instance",
                  sty.testimonial___2Qder
                )}
                slot2={"Michael L."}
                slot3={"Investor"}
              >
                {
                  "I trust Zipo Aid to navigate the complexities of the financial market. Their commitment to delivering results is truly remarkable."
                }
              </Testimonial>
              <Testimonial
                className={classNames(
                  "__wab_instance",
                  sty.testimonial___2BZd7
                )}
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__cybW0)}
                    displayHeight={"30px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"30px" as const}
                    loading={"lazy" as const}
                    src={
                      "https://images.unsplash.com/photo-1546961329-78bef0414d7c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=387&q=80" as const
                    }
                  />
                }
              >
                {
                  "Zipo Aid has been an essential partner in my investment journey. Their personalized advice and strategic recommendations have consistently exceeded my expectations."
                }
              </Testimonial>
            </p.Stack>
          </section>
          <section className={classNames(projectcss.all, sty.section__kqcm0)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f5OQy)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__dSfSj)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vJzFp)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zipo_aid/images/windowpng2.png",
                      fullWidth: 2260,
                      fullHeight: 1484,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vIIpX)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nkmAj
                  )}
                >
                  {"Ready to Start?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__spSkM
                  )}
                >
                  {
                    "Take the first step towards a brighter financial future with Zipo Aid. Our proven strategies and dedicated team are here to guide you every step of the way."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__oTwxt)}
                  color={"gold" as const}
                  ghost={true}
                  link={"/signup" as const}
                >
                  {"Get Started Today"}
                </Button>
              </p.Stack>
            </p.Stack>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "plansPage", "link"],
  plansPage: ["plansPage"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  plansPage: typeof PlansPage;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    plansPage: makeNodeComponent("plansPage"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
