// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jDNnmx5YPsmKB7YPk2zzKj
// Component: WKOYMNYQG4gi

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: d_44jQYJpk3I/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: rQrZ7hTfYzab/codeComponent

import { useScreenVariants as useScreenVariants_1DTjB6GfSzy } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 1dTjB_6GfSZY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zipo_aid.module.css"; // plasmic-import: jDNnmx5YPsmKB7YPk2zzKj/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: WKOYMNYQG4gi/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 3p4sKcTKk0dA/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: Novq6ZrIrQtY/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 7yH6DmHHOYpf/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: BiYSEID0kU5z/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {
  menuOpen: "menuOpen";
  signedIn: "signedIn";
};
export type PlasmicHeader__VariantsArgs = {
  menuOpen?: SingleBooleanChoiceArg<"menuOpen">;
  signedIn?: SingleBooleanChoiceArg<"signedIn">;
};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "menuOpen",
  "signedIn"
);

export type PlasmicHeader__ArgsType = {
  dashboardUrl?: string;
  signOut?: (event: any) => void;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "dashboardUrl",
  "signOut"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderProps {
  dashboardUrl?: string;
  signOut?: (event: any) => void;
  menuOpen?: SingleBooleanChoiceArg<"menuOpen">;
  signedIn?: SingleBooleanChoiceArg<"signedIn">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          dashboardUrl: "/signin" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showMenu",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "menuOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.menuOpen
      },
      {
        path: "signedIn",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.signedIn
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_1DTjB6GfSzy()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootmenuOpen]: hasVariant($state, "menuOpen", "menuOpen"),
          [sty.rootsignedIn]: hasVariant($state, "signedIn", "signedIn"),
          [sty.rootsignedIn_menuOpen]:
            hasVariant($state, "signedIn", "signedIn") &&
            hasVariant($state, "menuOpen", "menuOpen")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__mLp7, {
          [sty.freeBoxmenuOpen__mLp7FHbkS]: hasVariant(
            $state,
            "menuOpen",
            "menuOpen"
          )
        })}
      >
        {(hasVariant(globalVariants, "mobile", "mobileOnly") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__yhxY7, {
              [sty.freeBoxmenuOpen__yhxY7FHbkS]: hasVariant(
                $state,
                "menuOpen",
                "menuOpen"
              ),
              [sty.freeBoxsignedIn__yhxY7M4GJq]: hasVariant(
                $state,
                "signedIn",
                "signedIn"
              ),
              [sty.freeBoxsignedIn_menuOpen__yhxY7M4GJqFHbkS]:
                hasVariant($state, "signedIn", "signedIn") &&
                hasVariant($state, "menuOpen", "menuOpen")
            })}
          >
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={`/`}
              platform={"nextjs"}
            >
              {"Zipo Aid"}
            </p.PlasmicLink>
            {(
              hasVariant(globalVariants, "mobile", "mobileOnly") ? true : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__rF211, {
                  [sty.freeBoxmenuOpen__rF211FHbkS]: hasVariant(
                    $state,
                    "menuOpen",
                    "menuOpen"
                  )
                })}
              >
                {(
                  hasVariant($state, "menuOpen", "menuOpen") &&
                  hasVariant(globalVariants, "mobile", "mobileOnly")
                    ? true
                    : hasVariant(globalVariants, "mobile", "mobileOnly")
                    ? (() => {
                        try {
                          return !$state.showMenu;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__uhqPq, {
                      [sty.svgmenuOpen__uhqPqfHbkS]: hasVariant(
                        $state,
                        "menuOpen",
                        "menuOpen"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateMenuOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "bGsCPqGCw315",
                                  componentUuid: "WKOYMNYQG4gi",
                                  argName: "vgroup"
                                },
                                () => "menuOpen"
                              ),
                              operation: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "bGsCPqGCw315",
                                  componentUuid: "WKOYMNYQG4gi",
                                  argName: "operation"
                                },
                                () => 2
                              ),
                              value: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "bGsCPqGCw315",
                                  componentUuid: "WKOYMNYQG4gi",
                                  argName: "value"
                                },
                                () => "menuOpen"
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariant",
                                interactionUuid: "bGsCPqGCw315",
                                componentUuid: "WKOYMNYQG4gi"
                              },
                              () =>
                                (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  const oldValue = p.get($state, vgroup);
                                  p.set($state, vgroup, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateMenuOpen"] === "object" &&
                        typeof $steps["updateMenuOpen"].then === "function"
                      ) {
                        $steps["updateMenuOpen"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "bGsCPqGCw315",
                            componentUuid: "WKOYMNYQG4gi"
                          },
                          $steps["updateMenuOpen"]
                        );
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                {(
                  hasVariant($state, "menuOpen", "menuOpen") &&
                  hasVariant(globalVariants, "mobile", "mobileOnly")
                    ? true
                    : hasVariant(globalVariants, "mobile", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.showMenu;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__cg6Ja, {
                      [sty.svgmenuOpen__cg6JafHbkS]: hasVariant(
                        $state,
                        "menuOpen",
                        "menuOpen"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateMenuOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "dtFSK6I2wfPd",
                                  componentUuid: "WKOYMNYQG4gi",
                                  argName: "vgroup"
                                },
                                () => "menuOpen"
                              ),
                              operation: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "dtFSK6I2wfPd",
                                  componentUuid: "WKOYMNYQG4gi",
                                  argName: "operation"
                                },
                                () => 2
                              ),
                              value: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "dtFSK6I2wfPd",
                                  componentUuid: "WKOYMNYQG4gi",
                                  argName: "value"
                                },
                                () => "menuOpen"
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariant",
                                interactionUuid: "dtFSK6I2wfPd",
                                componentUuid: "WKOYMNYQG4gi"
                              },
                              () =>
                                (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  const oldValue = p.get($state, vgroup);
                                  p.set($state, vgroup, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateMenuOpen"] === "object" &&
                        typeof $steps["updateMenuOpen"].then === "function"
                      ) {
                        $steps["updateMenuOpen"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "dtFSK6I2wfPd",
                            componentUuid: "WKOYMNYQG4gi"
                          },
                          $steps["updateMenuOpen"]
                        );
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant($state, "menuOpen", "menuOpen") &&
          hasVariant(globalVariants, "mobile", "mobileOnly")
            ? true
            : hasVariant(globalVariants, "mobile", "mobileOnly")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__soNhw, {
              [sty.freeBoxmenuOpen__soNhwfHbkS]: hasVariant(
                $state,
                "menuOpen",
                "menuOpen"
              )
            })}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ozKpy, {
                  [sty.freeBoxmenuOpen__ozKpYfHbkS]: hasVariant(
                    $state,
                    "menuOpen",
                    "menuOpen"
                  )
                })}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__so15O)}
                  color={"clear" as const}
                  link={`/`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xgzBn
                    )}
                  >
                    {"Home"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button___9Xpsf, {
                    [sty.buttonmenuOpen___9XpsFfHbkS]: hasVariant(
                      $state,
                      "menuOpen",
                      "menuOpen"
                    )
                  })}
                  color={"clear" as const}
                  link={`/plans`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4R3J
                    )}
                  >
                    {"Plans"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__zxbBm, {
                    [sty.buttonmenuOpen__zxbBMfHbkS]: hasVariant(
                      $state,
                      "menuOpen",
                      "menuOpen"
                    ),
                    [sty.buttonsignedIn__zxbBmm4GJq]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  })}
                  color={"clear" as const}
                  link={`/contact`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g0Jd4
                    )}
                  >
                    {"Contact"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__eaqJf)}
                  color={"clear" as const}
                  link={`/about`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sKHm2
                    )}
                  >
                    {"About"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}
            {(hasVariant($state, "signedIn", "signedIn") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__evaVn, {
                  [sty.freeBoxsignedIn__evaVnm4GJq]: hasVariant(
                    $state,
                    "signedIn",
                    "signedIn"
                  )
                })}
              >
                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__dBgmg, {
                      [sty.buttonsignedIn__dBgmgm4GJq]: hasVariant(
                        $state,
                        "signedIn",
                        "signedIn"
                      )
                    })}
                    color={"clear" as const}
                    link={"/signin" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aj1Ha,
                        {
                          [sty.textsignedIn__aj1HaM4GJq]: hasVariant(
                            $state,
                            "signedIn",
                            "signedIn"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "signedIn", "signedIn")
                        ? "Dashboard"
                        : "Sign In"}
                    </div>
                  </Button>
                ) : null}
                <Button
                  className={classNames("__wab_instance", sty.button__x1Axt, {
                    [sty.buttonsignedIn__x1AxtM4GJq]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  })}
                  color={"white" as const}
                  ghost={true}
                  link={
                    hasVariant($state, "signedIn", "signedIn")
                      ? ("" as const)
                      : ("/signup" as const)
                  }
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kGkhu,
                      {
                        [sty.textsignedIn__kGkhum4GJq]: hasVariant(
                          $state,
                          "signedIn",
                          "signedIn"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "signedIn", "signedIn")
                      ? "Sign Out"
                      : "Sign Up"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}
            {(hasVariant($state, "signedIn", "signedIn") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u8EZe, {
                  [sty.freeBoxsignedIn__u8EZeM4GJq]: hasVariant(
                    $state,
                    "signedIn",
                    "signedIn"
                  )
                })}
              >
                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__fSgha, {
                      [sty.buttonsignedIn__fSghaM4GJq]: hasVariant(
                        $state,
                        "signedIn",
                        "signedIn"
                      )
                    })}
                    color={"clear" as const}
                    link={args.dashboardUrl}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p3OwK,
                        {
                          [sty.textsignedIn__p3OwKm4GJq]: hasVariant(
                            $state,
                            "signedIn",
                            "signedIn"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "signedIn", "signedIn")
                        ? "Dashboard"
                        : "Dashboard"}
                    </div>
                  </Button>
                ) : null}
                <Button
                  className={classNames("__wab_instance", sty.button___0MMz0, {
                    [sty.buttonsignedIn___0MMz0M4GJq]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  })}
                  color={"white" as const}
                  ghost={
                    hasVariant($state, "signedIn", "signedIn")
                      ? true
                      : undefined
                  }
                  link={
                    hasVariant($state, "signedIn", "signedIn")
                      ? ("" as const)
                      : ("/signup" as const)
                  }
                  onClick={args.signOut}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b1Gi5,
                      {
                        [sty.textsignedIn__b1Gi5M4GJq]: hasVariant(
                          $state,
                          "signedIn",
                          "signedIn"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "signedIn", "signedIn")
                      ? "Sign Out"
                      : "Sign Out"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
